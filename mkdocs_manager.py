#!/usr/bin/env python3
"""
MkDocs Server Manager - –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
"""

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Vte', '2.91')

from gi.repository import Gtk, GLib, Vte, Pango
import subprocess
import os
import webbrowser
import time
import socket

class MkDocsManager:
    def __init__(self):
        self.server_port = 8000
        self.server_url = f"http://localhost:{self.server_port}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.window = Gtk.Window()
        self.window.set_title("MkDocs Server Manager")
        self.window.set_default_size(800, 600)
        self.window.set_position(Gtk.WindowPosition.CENTER)
        self.window.connect("delete-event", self.on_close)
        
        self.create_ui()
        self.check_environment()
    
    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
        vbox.set_margin_left(20)
        vbox.set_margin_right(20)
        vbox.set_margin_top(20)
        vbox.set_margin_bottom(20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = Gtk.Label()
        title.set_markup("<span size='xx-large' weight='bold'>üöÄ MkDocs Manager</span>")
        vbox.pack_start(title, False, False, 0)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=10)
        hbox.set_margin_top(20)
        
        self.start_btn = Gtk.Button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å")
        self.start_btn.connect("clicked", self.start_server)
        self.start_btn.set_size_request(120, 40)
        
        self.stop_btn = Gtk.Button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.connect("clicked", self.stop_server)
        self.stop_btn.set_sensitive(False)
        self.stop_btn.set_size_request(120, 40)
        
        self.browser_btn = Gtk.Button("üåê –ë—Ä–∞—É–∑–µ—Ä")
        self.browser_btn.connect("clicked", self.open_browser)
        self.browser_btn.set_sensitive(False)
        
        self.status_label = Gtk.Label("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        hbox.pack_start(self.start_btn, False, False, 0)
        hbox.pack_start(self.stop_btn, False, False, 0)
        hbox.pack_start(self.browser_btn, False, False, 0)
        hbox.pack_end(self.status_label, False, False, 0)
        
        vbox.pack_start(hbox, False, False, 0)
        
        # –¢–µ—Ä–º–∏–Ω–∞–ª
        terminal_label = Gtk.Label("üìü –¢–µ—Ä–º–∏–Ω–∞–ª:")
        terminal_label.set_halign(Gtk.Align.START)
        vbox.pack_start(terminal_label, False, False, 0)
        
        self.terminal = Vte.Terminal()
        self.terminal.set_font(Pango.FontDescription("Monospace 10"))
        
        scrolled = Gtk.ScrolledWindow()
        scrolled.add(self.terminal)
        scrolled.set_size_request(-1, 350)
        vbox.pack_start(scrolled, True, True, 0)
        
        self.window.add(vbox)
        
        # –ó–∞–ø—É—Å–∫ bash –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
        self.terminal.spawn_sync(
            Vte.PtyFlags.DEFAULT,
            os.getcwd(),
            ["/bin/bash"],
            [],
            GLib.SpawnFlags.DO_NOT_REAP_CHILD,
            None,
            None,
        )
        
        self.window.show_all()
    
    def log(self, message):
        """–í—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª"""
        self.terminal.feed_child(f'echo "{message}"\n'.encode())
    
    def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        try:
            import gi
            gi.require_version('Gtk', '3.0')
            gi.require_version('Vte', '2.91')
            self.log("‚úÖ GTK –∏ VTE –¥–æ—Å—Ç—É–ø–Ω—ã")
        except Exception as e:
            self.log("‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            self.log("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install python3-gi gir1.2-gtk-3.0 gir1.2-vte-2.91")
            return
        
        if not os.path.exists('mkdocs.yml'):
            self.log("‚ùå mkdocs.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        if os.path.exists('.venv'):
            self.log("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            self.log("‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ")
        
        if self.is_port_busy():
            self.log(f"‚ö†Ô∏è –ü–æ—Ä—Ç {self.server_port} –∑–∞–Ω—è—Ç")
        else:
            self.log(f"‚úÖ –ü–æ—Ä—Ç {self.server_port} —Å–≤–æ–±–æ–¥–µ–Ω")
    
    def is_port_busy(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞"""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                return s.connect_ex(('localhost', self.server_port)) == 0
        except:
            return False
    
    def check_mkdocs_installed(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ mkdocs-material –≤ venv"""
        try:
            pip_path = os.path.join('.venv', 'bin', 'pip')
            if os.path.exists(pip_path):
                result = subprocess.run([pip_path, 'show', 'mkdocs-material'], 
                                      capture_output=True, text=True, timeout=10)
                return result.returncode == 0
        except:
            pass
        return False
    
    def setup_venv(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if not os.path.exists('.venv'):
            self.log("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
            self.terminal.feed_child(b'python3 -m venv .venv\n')
            time.sleep(2)
            need_install = True
        else:
            need_install = not self.check_mkdocs_installed()
        
        self.log("üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        self.terminal.feed_child(b'source .venv/bin/activate\n')
        time.sleep(1)
        
        if need_install:
            self.log("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            self.terminal.feed_child(b'pip install -r requirements.txt\n')
        else:
            self.log("‚úÖ mkdocs-material —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É")
    
    def start_server(self, button):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –µ—Å–ª–∏ –∑–∞–Ω—è—Ç
        if self.is_port_busy():
            self.log("üî™ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞...")
            try:
                subprocess.run(['pkill', '-f', 'mkdocs'], timeout=5)
                time.sleep(1)
            except:
                pass
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.setup_venv()
        
        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
        GLib.timeout_add(5000, self.actually_start_server)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.start_btn.set_sensitive(False)
        self.status_label.set_text("üü° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...")
    
    def actually_start_server(self):
        """–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.log("üåê –ó–∞–ø—É—Å–∫ MkDocs —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è venv –∏ –∑–∞–ø—É—Å–∫
        self.terminal.feed_child(b'source .venv/bin/activate\n')
        time.sleep(1)
        command = f'mkdocs serve --dev-addr=localhost:{self.server_port}\n'
        self.terminal.feed_child(command.encode())
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.stop_btn.set_sensitive(True)
        self.browser_btn.set_sensitive(True)
        self.status_label.set_text("üü¢ –ó–∞–ø—É—â–µ–Ω")
        
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        GLib.timeout_add(3000, self.auto_open_browser)
        
        return False
    
    def auto_open_browser(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.is_port_busy():
            self.log("üåê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
            methods = [
                ('webbrowser', lambda: webbrowser.open(self.server_url)),
                ('xdg-open', lambda: subprocess.run(['xdg-open', self.server_url], check=True, timeout=5)),
                ('firefox', lambda: subprocess.run(['firefox', self.server_url], check=True, timeout=5)),
                ('google-chrome', lambda: subprocess.run(['google-chrome', self.server_url], check=True, timeout=5))
            ]
            
            for method_name, method_func in methods:
                try:
                    method_func()
                    self.log(f"‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ {method_name}: {self.server_url}")
                    return False
                except Exception as e:
                    continue
            
            self.log(f"‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. URL: {self.server_url}")
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É (–º–∞–∫—Å–∏–º—É–º 10 –ø–æ–ø—ã—Ç–æ–∫)
            if not hasattr(self, 'browser_attempts'):
                self.browser_attempts = 0
            
            self.browser_attempts += 1
            if self.browser_attempts < 10:
                self.log(f"‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞... (–ø–æ–ø—ã—Ç–∫–∞ {self.browser_attempts}/10)")
                GLib.timeout_add(1000, self.auto_open_browser)
            else:
                self.log("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥")
        
        return False
    
    def stop_server(self, button):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.log("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ Ctrl+C
        self.terminal.feed_child(b'\x03')
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.start_btn.set_sensitive(True)
        self.stop_btn.set_sensitive(False)
        self.browser_btn.set_sensitive(False)
        self.status_label.set_text("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.log("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def open_browser(self, button):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if not self.is_port_busy():
            self.log("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.log(f"üåê –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å: {self.server_url}")
        
        # –°–ø–æ—Å–æ–± 1: webbrowser
        try:
            webbrowser.open(self.server_url)
            self.log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ webbrowser")
            return
        except Exception as e:
            self.log(f"‚ö†Ô∏è webbrowser –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        # –°–ø–æ—Å–æ–± 2: xdg-open
        try:
            subprocess.run(['xdg-open', self.server_url], check=True, timeout=5)
            self.log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ xdg-open")
            return
        except Exception as e:
            self.log(f"‚ö†Ô∏è xdg-open –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        # –°–ø–æ—Å–æ–± 3: firefox
        try:
            subprocess.run(['firefox', self.server_url], check=True, timeout=5)
            self.log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ firefox")
            return
        except Exception as e:
            self.log(f"‚ö†Ô∏è firefox –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        # –°–ø–æ—Å–æ–± 4: google-chrome
        try:
            subprocess.run(['google-chrome', self.server_url], check=True, timeout=5)
            self.log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ google-chrome")
            return
        except Exception as e:
            self.log(f"‚ö†Ô∏è google-chrome –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä. –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: {self.server_url}")
    
    def on_close(self, window, event):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        if self.stop_btn.get_sensitive():
            self.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
            self.terminal.feed_child(b'\x03')
            time.sleep(1)
        
        Gtk.main_quit()
        return False

def main():
    app = MkDocsManager()
    Gtk.main()

if __name__ == "__main__":
    main()